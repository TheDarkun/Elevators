@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (GameState.Value.IsLoading)
{
    <p>...</p>
}
else
{
    <section class="w-full h-full mx-8 mt-16 flex flex-col overflow-hidden gap-8">
    <MudCard Outlined="true" Class="flex justify-around items-center p-4 !rounded-2xl">
        <MudText Typo="Typo.h4">@GameState.Value.TopFloor <span class="opacity-50">Top Floor</span></MudText>
        <div class="h-8 border-l-[var(--mud-palette-divider)] border-l-[1px]"></div>
        <MudText Typo="Typo.h4">@GameState.Value.CurrentRound <span class="opacity-50">Current Round</span></MudText>
        <div class="h-8 border-l-[var(--mud-palette-divider)] border-l-[1px]"></div>
        @if (GameState.Value.Players.Any())
        {
            <MudText Typo="Typo.h4">@(GameState.Value.Players.OrderByDescending(p => p.Floor).FirstOrDefault().Name) <span class="opacity-50">Top Player</span></MudText>
        }
    </MudCard>
    <div class="flex flex-row gap-8 mb-16 overflow-y-scroll" style="height: 100%"> 
        <MudCard Outlined="true" Class="overflow-y-scroll  !rounded-2xl flex-1">
            <MudSimpleTable Elevation="0">
                <thead>
                <tr>
                    <th>
                        <div class="flex items-center justify-center">
                            <MudText Typo="Typo.h4">Contestant</MudText>
                        </div>
                    </th>
                    <th>
                        <div class="flex items-center justify-center">
                            <MudText Typo="Typo.h4">Floor</MudText>
                        </div>
                    </th>
                    <th>
                        <div class="flex items-center justify-center">
                            <MudText Typo="Typo.h4">Action</MudText>
                        </div>
                    </th>
                    <th>

                    </th>
                </tr>
                </thead>
                <tbody>
                @if (GameState.Value.Players.Any())
                {
                    foreach (var player in GameState.Value.Players)
                    {
                    <tr>
                        <td>
                            <div class="flex gap-8 items-center">
                                @if (GameState.Value.WinnerIds.Contains(player.UserId))
                                {
                                    <MudImage Src="images/crown.svg" Style="width: 3rem; position: absolute; transform: translate(30px, -32px) rotate(30deg);"/>
                                }
                                <MudImage Class=@($"w-16 h-16 !rounded-2xl") Style=@(player.IsAlive ? "" : "filter: saturate(0);") Src=@($"https://cdn.discordapp.com/avatars/{player.UserId}/{player.Avatar}.webp?size=256")></MudImage>
                                <MudText Class="@(player.IsAlive ? "" : "line-through")" Typo="Typo.h4">@player.Name</MudText>
                            </div>
                        </td>
                        <td>
                            <div class="flex items-center justify-center" style="display: flex">
                                <MudText Typo="Typo.h4">@player.Floor</MudText>
                            </div>
                        </td>
                        <td >
                            <div class="flex items-center justify-center" style="display: flex">
                                @if (!player.IsAlive && player.PlayerAction == PlayerAction.NoAction)
                                {
                                    <MudText Typo="Typo.h4">Eliminated</MudText>
                                }
                                else if (player.Submitted)
                                {
                                    if (GameState.Value.IsFinished)
                                    {
                                        <MudText Typo="Typo.h4">@player.PlayerAction @(player.PlayerAction == PlayerAction.Cut ? GameState.Value.Players.FirstOrDefault(p => p.UserId == player.CutPlayerId).Name : "")</MudText>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Primary" Size="Size.Large"/>
                                    }
                                }
                                else
                                {
                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="flex justify-end items-center">
                                <MudButton Variant="Variant.Outlined" Class="!rounded-xl !p-3 !px-8" Size="Size.Large" Color="Color.Primary">Kick</MudButton>
                            </div>
                        </td>
                    </tr>   
                    }
                }
                </tbody>
            </MudSimpleTable>
        </MudCard>
        <MudCard Class="w-[16rem] !rounded-2xl flex-col flex items-start justify-stretch p-8 gap-8" Outlined="true">
            @if (GameState.Value.IsFinished)
            {
                <MudButton OnClick="HandleSendResults" Variant="Variant.Filled" Class="!rounded-xl !p-3 !px-8 w-full" Size="Size.Large" Color="Color.Primary">Send Results</MudButton>
                if(!GameState.Value.Finished)
                {
                    <MudButton OnClick="HandleNextRound" Variant="Variant.Filled" Class="!rounded-xl !p-3 !px-8 w-full" Size="Size.Large" Color="Color.Primary">Next Round</MudButton>
                }
            }
            else
            {
                if (!GameState.Value.Finished)
                {
                    <MudButton Variant="Variant.Outlined" Class="!rounded-xl !p-3 !px-8 w-full" Size="Size.Large" Color="Color.Primary">Force Skip</MudButton>
                }
            }
            <MudButton OnClick="HandleDeleteGame" Variant="@(GameState.Value.Finished ? Variant.Filled : Variant.Outlined)" Class="!rounded-xl !p-3 !px-8 w-full" Size="Size.Large" Color="Color.Primary">Delete Game</MudButton>
        </MudCard>
    </div>
</section>
}