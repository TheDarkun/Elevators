@using Web.Connectors
@inject IServerListConnector connector

<aside class="glass-panel row-start-2 h-full mx-8 flex flex-col w-24 gap-4  p-4 hide-overflow">

        @if (connector.DiscordServers is null)
        {
            <section class="flex items-center justify-center h-full">
                <span class="loading loading-spinner loading-lg"></span>
            </section>
        }
        else
        {
            <AuthorizeView>
                @{
                    var dict = context.User.Claims.ToDictionary(claim => claim.Type, claim => claim.Value);
                }
                <section class="flex flex-col gap-4">
                    <a href="/Dashboard" class="avatar pb-2">
                        <div class="w-16 h-16 mask mask-circle hover:mask-squircle cursor-pointer shadow-2xl shadow-red-50">
                            <img class="" src="https://cdn.discordapp.com/avatars/@dict["Id"]/@(dict["Avatar"]).png"/>
                        </div>
                    </a>
                    <hr/>
                </section>
                
            </AuthorizeView>
            
            foreach (var server in connector.DiscordServers)
            {
                <a href="/Server/@server.Id" class="avatar">
                    <div class="w-24 mask mask-circle hover:mask-squircle cursor-pointer">
                    @if (string.IsNullOrWhiteSpace(server.Icon))
                    {
                        <h3 class="bg-primary w-full h-full flex items-center justify-center">
                            @server.Name.Substring(0,2)
                        </h3>
                    }
                    else
                    {
                        <img src="https://cdn.discordapp.com/icons/@(server.Id)/@(server.Icon).png?size=2048" />
                    }
                    </div>
                </a>
            }
        }
    </aside>




@code{

    protected override async Task OnInitializedAsync()
    {
        await connector.RetrieveDiscordServersAsync();
    }

}